# Build image
FROM mcr.microsoft.com/dotnet/core/sdk:2.2 AS build-env
WORKDIR /app
COPY ./BloodBowlLeagueBackend.sln ./
COPY NuGet.Config ./

# Copy all the csproj files and restore to cache the layer for faster builds
# The dotnet_build.sh script does this anyway, so superfluous, but docker can
# cache the intermediate images so _much_ faster
COPY ./Matches/Host.Matches/Host.Matches.csproj ./Matches/Host.Matches/Host.Matches.csproj
COPY ./Matches/Application.Matches/Application.Matches.csproj ./Matches/Application.Matches/Application.Matches.csproj
COPY ./Matches/Domain.Matches/Domain.Matches.csproj ./Matches/Domain.Matches/Domain.Matches.csproj
COPY ./ServiceConfig/ServiceConfig.csproj ./ServiceConfig/ServiceConfig.csproj

RUN dotnet restore --configfile NuGet.Config ./Matches/Host.Matches/Host.Matches.csproj
RUN dotnet restore --configfile NuGet.Config ./Matches/Application.Matches/Application.Matches.csproj
RUN dotnet restore --configfile NuGet.Config ./Matches/Domain.Matches/Domain.Matches.csproj
RUN dotnet restore --configfile NuGet.Config ./ServiceConfig/ServiceConfig.csproj

COPY ./Matches ./Matches
COPY ./ServiceConfig ./ServiceConfig
RUN dotnet build ./Matches/Host.Matches/Host.Matches.csproj -c Release

RUN dotnet publish "./Matches/Host.Matches/Host.Matches.csproj" -c Release -o "../../out"

#App image
FROM mcr.microsoft.com/dotnet/core/aspnet:2.2
WORKDIR /app
COPY --from=build-env /app/out .
CMD ["dotnet", "Host.Matches.dll"]